#!/bin/bash

#
# Purposes : renders and publish documentation built through mkdocs and from git 
# Called by: cron
# Configured by: Ansible, don't edit
#

action="$1"
git_upstream="{{ httpd_docs_git_url }}"
git_directory="/home/{{ httpd_docs_username }}/git/"
logfile="/home/{{ httpd_docs_username }}/mkdocs-{{ httpd_docs_hostname }}.log"
local_docs_git_repo=$(echo {{ httpd_docs_git_url }}|rev | cut -f 1 -d '/'|rev| sed 's/.git//')
tracked_branch="{{ httpd_docs_git_branch }}"

function usage() {
cat << EOF
You need to call the script like this : $0 -arguments
Argument can be one of the following:
 init		: prepares local podman container and git initial clone
 build		: verify upstream git and rebuild if different

EOF
}

f_log() {
   echo "[+] $(date +%Y%m%d-%H:%M) $(basename $0) -> $*" >>$logfile
}

# Checking if container path/tag is specified in git itself otherwise just using legacy one (jekyll/jekyll)
function container_check() {
  container_path="{{ httpd_docs_container }}"
  container_tag="{{ httpd_docs_container_tag }}"
  f_log "Checking if we have ${container_path}:${container_tag} and downloading if needed"
  {% raw %}podman images --format "{{.Repository}}:{{.Tag}}"|grep -q ${container_path}:${container_tag} || podman pull ${container_path}:${container_tag} >>$logfile 2>&1 {% endraw %}

}



function init(){
  test -d ${git_directory} || mkdir -p ${git_directory}
  pushd ${git_directory} >/dev/null
  test -d ${local_docs_git_repo} || git clone --recurse-submodules --jobs=$(( $(grep "cpu cores" /proc/cpuinfo|head -n 1 | awk '{print $4}') * 2)) ${git_upstream} >>$logfile 2>&1 
  pushd ${local_docs_git_repo} >/dev/null ; git checkout ${tracked_branch} >>$logfile 2>&1 ; popd >/dev/null
  container_check
  popd >/dev/null
  render
}

function render(){
  container_check
  podman run --volume="${git_directory}/${local_docs_git_repo}:/docs:z" --rm -it ${container_path}:${container_tag} {{ httpd_docs_mkdocs_buildcmd }} >>$logfile 2>&1
  if [ "$?" -eq "0" ] ; then
    f_log "Rendering status : $? => syncing to /var/www/{{ httpd_docs_hostname }}"
    rsync -aH --delete-after ${git_directory}/${local_docs_git_repo}/site/ /var/www/{{ httpd_docs_hostname }}
  else
    f_log "[ERROR] issue detected from mkdocs call"
  fi
}

function build(){
  pushd ${git_directory}/${local_docs_git_repo} >/dev/null
  git checkout ${tracked_branch} >>$logfile 2>&1
  last_commit=$(git log| head -n 1|awk '{print $2}')
  git pull --recurse-submodules --jobs=$(( $(grep "cpu cores" /proc/cpuinfo|head -n 1 | awk '{print $4}') * 2)) origin ${tracked_branch} >>$logfile 2>&1
  current_commit=$(git log| head -n 1|awk '{print $2}')
  popd >/dev/null

  if [ "${current_commit}" == "${last_commit}" ] ; then
    f_log "Git head/last commit is equal [${current_commit}]"
    f_log "Skipping build and push"
  else
    render
fi
}

if [ "$action" == "init" ] ; then
   f_log "Initializing ..."
   init
elif [ "$action" ==  "build" ] ; then
   f_log "Comparing upstream git HEAD and rebuilding if needed"
   build
elif [ "$action" ==  "refresh" ] ; then
  f_log "Refreshing external content and rendering website .."
  refresh
else
  usage
  exit 1
fi


