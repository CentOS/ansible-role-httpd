#!/bin/bash

#
# Purposes : renders and publish website from git 
# Called by: cron
# Configured by: Ansible, don't edit
#

action="$1"
git_branch="$2"
web_servers="{{ httpd_www_servers }}" # servers to push content to
git_upstream="{{ httpd_www_git_upstream }}" # Where to git clone/pull from
git_directory="${HOME}/git"
logfile="${HOME}/centos_website-${git_branch}.log"

function usage() {
cat << EOF
You need to call the script like this : $0 <action> <branch>
<action> can be one of the following:
 init	 : prepares local jekyll container and git initial clone
 build	 : verify upstream git and rebuild if different
 refresh : download from external sources content like .csv files to update website
<branch> can be main/staging 

EOF
}

f_log() {
   echo "[+] $(date +%Y%m%d-%H:%M) $(basename $0) -> $*" >>$logfile
}

# Checking if container path/tag is specified in git itself otherwise just using legacy one (jekyll/jekyll)
function container_check() {
  if [ -e ${git_directory}/centos.org/container.specs ] ; then
    source ${git_directory}/centos.org/container.specs
    volumes_args="--volume=${git_directory}/centos.org:/site:z"
    jekyll_build_cli="bundle exec jekyll build --config /site/_config-${git_branch}.yml -s /site -d /site/_site/"
  else
    container_tag="latest"
    container_path="docker.io/jekyll/jekyll"
    volumes_args="--volume=${git_directory}/centos.org:/srv/jekyll:z --volume=${git_directory}/centos.org/vendor/bundle:/usr/local/bundle:z"
    jekyll_build_cli="jekyll build"
  fi
  {% raw %}podman images --format "{{.Repository}}:{{.Tag}}"|grep -q ${container_path}:${container_tag} || podman pull ${container_path}:${container_tag} >> $logfile 2>&1 {% endraw %} 

}

function init(){
  test -d ${git_directory} || mkdir -p ${git_directory}
  pushd ${git_directory} >/dev/null
  test -d centos.org || git clone ${git_upstream} >> $logfile 2>&1
  pushd centos.org >> $logfile ; git checkout ${git_branch} >> $logfile ; popd >> $logfile
  for i in .jekyll-cache vendor vendor/bundle _site ; do 
    podman unshare mkdir -p ${git_directory}/centos.org/${i}
    podman unshare chown -R ${UID}:${UID} ${git_directory}/centos.org/${i}
  done
  podman unshare chown -R ${UID}:${UID} ${git_directory}/centos.org/Gemfile.lock
  container_check
  popd >/dev/null
  refresh
}

function refresh(){
  container_check
  pushd ${git_directory}/centos.org/_data >/dev/null
  # CentOS Stream AMI IDs list from Jenkins
  f_log "Ensuring we have checkout from git"
  git checkout aws-images.csv >> $logfile 2>&1
  for file in https://sources.stream.centos.org/artifacts/stream-ami-list.csv ; do
    f_log "Refreshing content from $file ..."
    curl --silent --fail ${file} | egrep -v '^===' >> aws-images.csv
    if [ "$?" -ne "0" ] ;then
      f_log "[ERROR] Issue downloading file https://sources.stream.centos.org"
      f_log "Exiting ..."
      zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k podman.render.${git_branch} -o 1 >/dev/null
      exit 1
    fi
  done 
  test -d centos || mkdir -p centos     
  #/usr/libexec/centos/rss2json.py -i https://blog.centos.org/feed -o centos/blog.json
  curl --silent --fail 'https://api.rss2json.com/v1/api.json?rss_url=https://blog.centos.org/feed' > centos/blog.json
  if [ "$?" -ne "0" ] ;then
    git checkout centos/blog.json
    f_log "[ERROR] Issue refreshing rss feed from blog.centos.org"
    f_log "Exiting ..."
    zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k podman.render.${git_branch} -o 1 >/dev/null
    exit 1
  fi 
  popd >/dev/null
  render
}

function render(){
  container_check
  podman run --rm -it ${volumes_args} ${container_path}:${container_tag} ${jekyll_build_cli} >> $logfile 2>&1
  if [ "$?" -eq "0" ] ; then
    f_log "Rendering status : $? "
    if [ "${git_branch}" == "staging" ] ; then
      f_log "git branch is [${git_branch}] so copying locally to /var/www/centos_website/"
      rsync -aH --delete-after ${git_directory}/centos.org/_site/ /var/www/centos_website/
    else
      f_log "git branch is [${git_branch}] so pushing live to www nodes"
      if [ -z "${web_servers}" ] ; then
        f_log "Empty web servers list so nowhere to push, skipping"
      else
        for node in ${web_servers}; do
	  f_log "Pushing content to $node .."
	  rsync -aH --delete-after  ${git_directory}/centos.org/_site/ wwwpush@${node}:/var/www/centos_website/ >/dev/null 2>&1 
	  if [ "$?" -ne "0" ] ; then
	    f_log "[ERROR] Error pushing to target ${node}."
	    f_log "Exiting process"
	    zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k podman.render.${git_branch} -o 1 >/dev/null
	    exit 1
	  fi 
	done
      fi
    fi
  else
    f_log "[ERROR] issue detected when building website"
    zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k podman.render.${git_branch} -o 1 >/dev/null
    exit 1
  fi
}

function build(){
  pushd ${git_directory}/centos.org >/dev/null
  git checkout ${git_branch} >> $logfile 2>&1
  last_commit=$(git log| head -n 1|awk '{print $2}')
  git pull origin ${git_branch} >> $logfile 2>&1
  current_commit=$(git log| head -n 1|awk '{print $2}')
  popd >/dev/null

  if [ "${current_commit}" == "${last_commit}" ] ; then
    f_log "Git head/last commit is equal [${current_commit}] for branch [${git_branch}]"
    f_log "Skipping website build and push"
  else
    render
fi
}

if [ "$action" == "init" ] ; then
   f_log "Initializing for branch [${git_branch}] ..."
   init
elif [ "$action" ==  "build" ] ; then
   f_log "Comparing upstream git HEAD and rebuilding if needed"
   build
elif [ "$action" ==  "refresh" ] ; then
  f_log "Refreshing external content and rendering website .."
  refresh
else
  usage
  exit 1
fi

# If we made it here, that means all was ok so updating zabbix status
zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k podman.render.${git_branch} -o 0 >/dev/null
exit 0
